Taking snapshots of your instance

	Taking an initial snapshot
1. To display the EBS volume-id: aws ec2 describe-instances --filter 'Name=tag:Name,Values=Processor' --query 'Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.{VolumeId:VolumeId}'
2. take snapshot of this volume: aws ec2 describe-instances --filters 'Name=tag:Name,Values=Processor' --query 'Reservations[0].Instances[0].InstanceId'
3. shut down the instance: aws ec2 stop-instances --instance-ids INSTANCE-ID
4. verify that the instance stopped: aws ec2 wait instance-stopped --instance-id INSTANCE-ID
5. create first snapshot of the volume instance: aws ec2 create-snapshot --volume-id VOLUME-ID
6. check the status of your snapshot: aws ec2 wait snapshot-completed --snapshot-id SNAPSHOT-ID
7. restart the instance: aws ec2 start-instances --instance-ids INSTANCE-ID

	Scheduling the creation of subsequent snapshots
1. To create and schedule a cron entry that runs a job every minute: echo "* * * * *  aws ec2 create-snapshot --volume-id VOLUME-ID 2>&1 >> /tmp/cronlog" > cronjob
crontab cronjob
2. verify that subsequent snapshots are being created: aws ec2 describe-snapshots --filters "Name=volume-id,Values=VOLUME-ID"

	Retaining the last two snapshots            vol-0581b2fdd6127d2ec
1. stop the cron job: crontab -r
2. examine the contents of the Python script "snapshotter_v2.py": more /home/ec2-user/snapshotter_v2.py
3.List of snapshots that were created by your cron job before you stopped it: aws ec2 describe-snapshots --filters "Name=volume-id, Values=VOLUME-ID" --query 'Snapshots[*].SnapshotId'
4. Run the the "snapshotter_v2.py" script: python3 snapshotter_v2.py
	**Check Python and Pip Versions
Ensure you are using the correct Python and Pip version:
	python3 --version
	pip3 --version
If multiple Python versions exist, try: python3 -m pip install boto3
5.  examine the new number of snapshots for the current volume, re-run the following command from an earlier step: aws ec2 describe-snapshots --filters "Name=volume-id, Values=VOLUME-ID" --query 'Snapshots[*].SnapshotId'

	Synchronize files with Amazon S3
1. download a sample set of files: wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RSJAWS-3-23732/183-lab-JAWS-managing-storage/s3/files.zip
2. Unzip: unzip files.zip
3. Before syncing content with your Amazon S3 bucket, you need to activate versioning on your bucket: aws s3api put-bucket-versioning --bucket S3-BUCKET-NAME --versioning-configuration Status=Enabled
4. sync the contents of the files folder with your Amazon S3 bucket: aws s3 sync files s3://S3-BUCKET-NAME/files/
5. confirm the state of your files: aws s3 ls s3://S3-BUCKET-NAME/files/
6. delete one of the files on the local drive: rm files/file1.txt
7. delete the same file from the S3 bucket, use the --delete option with the aws s3 sync command: aws s3 sync files s3://S3-BUCKET-NAME/files/ --delete
8. verify that the file was deleted from the bucket: aws s3 ls s3://S3-BUCKET-NAME/files/
9. try to recover the old version of file1.txt: aws s3api list-object-versions --bucket S3-BUCKET-NAME --prefix files/file1.txt
10. download the previous version of file1.txt: aws s3api get-object --bucket S3-BUCKET-NAME --key files/file1.txt --version-id VERSION-ID files/file1.txt
11. re-sync the contents of the files/ folder to Amazon S3: aws s3 sync files s3://S3-BUCKET-NAME/files/
12. verify that a new version of file1.txt was pushed to the S3 bucket: aws s3 ls s3://S3-BUCKET-NAME/files/














